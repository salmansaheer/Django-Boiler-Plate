"""
Django settings for project_main project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Define the path to the 'env' folder
ENV_DIR = os.path.join(BASE_DIR, 'env')

ENV_COMMON = os.path.join(ENV_DIR, '.env.common')
ENV_CLIENT = os.path.join(ENV_DIR, '.env.client')

# Loading env files
load_dotenv(ENV_COMMON)
load_dotenv(ENV_CLIENT)

AUTH_USER_MODEL = 'users.Account'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY =os.environ['SECRET_KEY']
JWT_SECRET_KEY =os.environ['JWT_SECRET_KEY']

FRONTEND_HOST =os.environ['FRONTEND_HOST']
BACKEND_HOST =os.environ['BACKEND_HOST']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG'] == 'True'

ALLOWED_HOSTS = []
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS =True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    "corsheaders",
    'django_filters',
    'django_extensions',
    'users',

]

MIDDLEWARE = [
    'users.middlewares.JWTAuthFromCookieMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
        # 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.AllowAny'],
        'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
        'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication'],
        'DEFAULT_RENDERER_CLASSES': (['rest_framework.renderers.JSONRenderer','rest_framework.renderers.BrowsableAPIRenderer',]),
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
        'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend', 
                                    'rest_framework.filters.SearchFilter',
                                    'rest_framework.filters.OrderingFilter'],
        'PAGE_SIZE': 5,
        
    }

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    # Refresh token valid for 7 days
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'TOKEN_BLACKLIST': True,
}

SENDER_EMAIL =os.environ['SENDER_EMAIL']
EMAIL_BACKEND =os.environ['EMAIL_BACKEND']
EMAIL_FILE_PATH =os.environ['EMAIL_FILE_PATH']
EMAIL_HOST =os.environ['EMAIL_HOST']
EMAIL_USE_TLS =os.environ['EMAIL_USE_TLS']
EMAIL_PORT =os.environ['EMAIL_PORT']
EMAIL_HOST_USER =os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD =os.environ['EMAIL_HOST_PASSWORD']

# REDIS_HOST = os.environ['REDIS_HOST']
# REDIS_PORT = os.environ['REDIS_PORT']

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [(REDIS_HOST, REDIS_PORT)],
#             "capacity": 2500,
#             "expiry": 10,
#         },
#     },
#     }

# RABBITMQ_HOST = os.environ['RABBITMQ_HOST']
# RABBITMQ_PORT = os.environ['RABBITMQ_PORT']
# RABBITMQ_USER = os.environ['RABBITMQ_USER']
# RABBITMQ_PASSWORD = os.environ['RABBITMQ_PASSWORD']

# CELERY_BROKER_URL = f"amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}@{RABBITMQ_HOST}:{RABBITMQ_PORT}//"

# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'